#==========================================================
# totp-cth-cli
# Database Encryption Library
# Written by cth451 <cth451@gmail.com>
# Licensed under LGPL 3
#
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Lesser General Public
# License for more details.
#==========================================================

# On first time use, the script should invoke
# encryptSetup(), which encrypts current database using
# aes-256-cbc, which password was encrypted using RSA
# keypair.

encryptSetup () {
	[ -f ${storeDir}/encrypted.flag ] && exit 0
	local aesKey
	aesHex=`openssl rand -hex 16`
	ivHex=`openssl rand -hex 16`
	prompt_BOLD "Invoking openssl to generate rsa key pair."
	prompt_BOLD "Set a strong password when asked."
	openssl genrsa -des3 -out ${storeDir}/databasePrivate.pem 4096
	openssl rsa -in ${storeDir}/databasePrivate.pem -pubout -out ${storeDir}/databasePublic.pem
	# key generation complete
	
	aesKeyContent="${aesHex}:${ivHex}"
	prompt_BOLD "Encrypting AES key..."
	openssl enc -aes-256-cbc -e -in ${storeDir}/keys.db -out ${storeDir}/keys.db.encrypt -K ${aesHex} -iv ${ivHex}
	echo -n "${aesKeyContent}" | openssl rsautl -out ${storeDir}/aesKeyStore.encrypt -pubin -inkey ${storeDir}/databasePublic.pem -encrypt
	# AES Key stored in aesKeyStore.encrypt
	# database at keys.db.encrypt
	# RSA private key at databasePrivate.pem
	# RSA public key at batabasePublic.pem
	chmod 0600 ${storeDir}/aesKeyStore.encrypt
	chmod 0600 ${storeDir}/databasePrivate.pem
	echo > ${storeDir}/encrypted.flag
	rm -f ${storeDir}/keys.db
}

decryptSetup () {
	[ -f ${storeDir}/encrypted.flag ] || exit 0
	aesKeyContent=`getContentAES`
	aesHex=`getHexKEY ${aesKeyContent}`
	ivHex=`getHexIV ${aesKeyContent}`
	execDecrypt ${aesHex} ${ivHex} > ${storeDir}/keys.db
	rm -f ${storeDir}/keys.db.encrypt
	rm -f ${storeDir}/databasePrivate.pem
	rm -f ${storeDir}/databasePublic.pem
	rm -f ${storeDir}/aesKeyStore.encrypt
	rm -f ${storeDir}/encrypted.flag
}

getContentAES () {
	openssl rsautl -in ${storeDir}/aesKeyStore.encrypt -inkey ${storeDir}/databasePrivate.pem -decrypt
	# print aes key and iv
}

getHexKEY () {
	# $1: aesKeyContent
	aesHex=`echo ${1} | sed -e 's/:.*$//g'`
	echo ${aesHex}
}

getHexIV () {
	# $1: aesKeyContent
	ivHex=`echo ${1} | sed -e 's/^.*://g'`
	echo ${ivHex}
}

execDecrypt () {
	# $1: aesHex
	# $2: ivHex
	openssl enc -aes-256-cbc -d -in ${storeDir}/keys.db.encrypt -K ${1} -iv ${2}
	# get decrypted key contents
}

execEncrypt () {
	# $1: keys.db in memory
	# $2: aesHex
	# $3: ivHex
	echo "${1}" | openssl enc -aes-256-cbc -e -out ${storeDir}/keys.db.encrypt -K ${2} -iv ${3}
	# write input if keys changed) to file
}
