#!/bin/bash
#==========================================================
# totp-cth-cli
# Main Script
# Written by cth451 <cth451@gmail.com>
# Licensed under LGPL 3
#
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Lesser General Public
# License for more details.
#==========================================================

# Variables
storeDir="${HOME}/.totp-cth-cli"
opt_TEST=0
opt_DEBUG=0
. '@libdir@/totp-cth-cli/base32decoder.lib.sh' 
. '@libdir@/totp-cth-cli/io.lib.sh'

usage () {
	prompt_BOLD "Usage: totp-cth-cli <command> [--debug]"
	prompt_BOLD "Commands"
	prompt_REGU "	init		init the key storage for first time use"
	prompt_REGU "	show <name>	show the key requested"
	prompt_REGU "	add-key <name>	add a TOTP key"
	prompt_REGU "	del-key	<name>	remove a TOTP key"
	prompt_REGU "	list-key	list stored keys"
	prompt_REGU "	help		print this help message"
	prompt_REGU "	test		interactive testing sector"
	prompt_REGU "	--debug		Show Debug information"
	exit 0
}

genToken () {
	key=$1
	(( $opt_TEST )) && read -p "timeStamp in seconds/30:" timeStamp || timeStamp=$((`date +%s`/30 ))
	# only ask for custom timestamp while testing
	
	timeStamp=`echo "obase=16;${timeStamp}"| bc`
	for (( i=${#timeStamp}; i<16; i++)); do
		timeStamp="0"${timeStamp}
	done
	for (( i=0; i<${#timeStamp}; i=i+2)); do
		echo -n -e "\x${timeStamp:${i}:2}" >> ${storeDir}/time.tmp
	done
	(( $opt_DEBUG )) && echo "counter:${timeStamp}"
	# convert time to Hex value
	
	local hmacHash
	hmacHash=$(openssl dgst -sha1 -mac HMAC -macopt hexkey:"${key}" ${storeDir}/time.tmp | sed -e 's/^.* //')
	(( $opt_DEBUG )) && echo "hmacHash:${hmacHash}"
	# Generate the hash
	
	for (( i=0; i<=19; i=i+1 )); do
		byteArray[${i}]=${hmacHash:${i}*2:2}
	done
	hmacOffset=$((16#${hmacHash:39}))
	# Got the offset
	
	for (( i=${hmacOffset}; i<=${hmacOffset}+3; i++ )); do
		totpHex="${totpHex}""${byteArray[${i}]}"
	done
	totpValue=$((16#${totpHex} & 16#7fffffff))
	# Truncate the hash and mask the result
	
	prompt_BOLD "${totpValue:${#totpValue}-6}"
	# Print the last 6 numbers
	
	unset totpValue totpHex hmacOffset hmacHash key timeStamp byteArray
}

initDatabase () {
	if [[ -d ${storeDir} ]]; then
		prompt_BOLD "Key Storage exists at ${storeDir}/keys.db"
		exit 0
	fi
	mkdir ${storeDir}
	touch ${storeDir}/keys.db
	echo "Done!"
	exit 0
}

showKey () {
	echo "looking for ${1}..."
	keyEntry=`grep "${1}:" ${storeDir}/keys.db`
	token=${keyEntry:${#1}+1}
	# Get the encoded key from the file
	if [[ "$token" == "" ]]; then
		prompt_BOLD "Nothing found."
		exit 0
	else
		hexToken=`base32ToHex ${token}`
		(( $opt_DEBUG )) && echo "${hexToken}"
		# convert the key to hexadecimal value
		genToken ${hexToken}
	fi
	
	unset keyEntry token hexToken
}

addKey () {
	read -p "${font_BOLD}Put your base32 encoded key here: ${style_RESET}" encodedKey
	name="$1"
	echo "${name}:${encodedKey}" >> ${storeDir}/keys.db
	prompt_REGU "Key added!"
	# Store Base32 encoded keys in the file
	
	unset ${encodedKey}
}

delKey () {
	echo "looking for ${1}..."
	keyEntry=`grep "${1}:" ${storeDir}/keys.db`
	token=${keyEntry:${#1}+1}
	if [[ "$token" == "" ]]; then
		prompt_BOLD "Key ${1} not found."
		exit 0
	else
		prompt_WARN "WARNING!"
		prompt_REGU "Removing this key ${font_BOLD}WON'T DISABLE${style_RESET} 2 Factor Auth for your account!"
		prompt_REGU "If you don't have backup access, deleting this key could lock yourself out!"
		read -p "${font_BOLD}Are you sure that you want to delete the key ${1}? [y/N]${style_RESET} " answer
		if [[ $answer =~ (y|Y|yes) ]]; then
			sed -i -e "/${1}:/d" "${storeDir}/keys.db"
			prompt_BOLD "Key ${1} deleted."
		else
			prompt_REGU "Key not changed."
		fi
	fi
	
	unset token keyEntry
}

listKey () {
	keys=`cat ${storeDir}/keys.db`
	prompt_BOLD "Available Keys:"	
	for keyEntry in ${keys}; do
		echo ${keyEntry} | sed -e "s/:.*$//g"
	done
	
	unset keyEntry keys
}

doTest () {
	opt_TEST=1
	opt_DEBUG=1
	prompt_REGU "Using 12345678901234567890 as decoded key."
	keyForTest="3132333435363738393031323334353637383930"
	# Hex representation for 12345678901234567890
	# override the token when testing
	genToken ${keyForTest}
}

# main function
unset MAJOR
rm -rf ${storeDir}/*.tmp

for var in "$@"; do
	case "$var" in
		"init")		MAJOR="init";;
		"show")		MAJOR="show";;
		"add-key")	MAJOR="add";;
		"del-key")	MAJOR="del";;
		"list-key")	MAJOR="list";;
		"help")		MAJOR="help";;
		"test")		MAJOR="test";;
		"--debug")	opt_DEBUG=1;;
		*)		PARAM="$var";;
	esac
	shift
done

case "$MAJOR" in
	init)		initDatabase;;
	show)		[[ ${PARAM} ]] && showKey "${PARAM}" || prompt_REGU "Key name required.";;
	add)		[[ ${PARAM} ]] && addKey "${PARAM}" || prompt_REGU "Key name required.";;
	del)		[[ ${PARAM} ]] && delKey "${PARAM}" || prompt_REGU "Key name required.";;
	list)		listKey;;
	help)		usage;;
	test)		doTest;;
	*)		usage;;
esac

(( $opt_DEBUG )) || rm -rf ${storeDir}/*.tmp
exit 0
