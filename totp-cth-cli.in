#!/bin/bash
#==========================================================
# totp-cth-cli
# Main Script
# Written by cth451 <cth451@gmail.com>
# Licensed under LGPL 3
#
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Lesser General Public
# License for more details.
#==========================================================

# Variables
storeDir="${HOME}/.totp-cth-cli"
opt_TEST=0
opt_DEBUG=0
opt_MINIO=0
. '@libdir@/base32decoder.lib.sh' 
. '@libdir@/io.lib.sh'
. '@libdir@/encryption.lib.sh'
. '@libdir@/strings.lib.sh'

usage () {
	prompt_BOLD "Usage: totp-cth-cli <command> [--debug]"
	prompt_BOLD "Commands:"
	prompt_REGU "	init		init the key storage for first time use"
	prompt_REGU "	show <name>	show the key requested"
	prompt_REGU "	add-key <name>	add a TOTP key"
	prompt_REGU "	del-key	<name>	remove a TOTP key"
	prompt_REGU "	list-key	list stored keys"
	prompt_REGU "	help		print this help message"
	prompt_REGU "	test		interactive testing sector"
	prompt_BOLD "Options:"
	prompt_REGU "	--debug		Show Debug information"
	prompt_REGU "	--minio		MINimum I/O, only show result."
	prompt_BOLD "Advanced commands (and unstable):"
	prompt_REGU "	enable-enc	setup database encryption"
	prompt_REGU "	disable-enc	disable database encryption"
	prompt_REGU "			(disable and re-enable to change password)"
	exit 0
}

genToken () {
	key=$1
	(( $opt_TEST )) && read -p "timeStamp in seconds: " timeValue || timeValue=`date +%s`
	timeStamp=$(( ${timeValue}/30 ))
	# only ask for custom timestamp while testing
	
	timeStamp=`echo "obase=16;${timeStamp}"| bc`
	for (( i=${#timeStamp}; i<16; i++)); do
		timeStamp="0"${timeStamp}
	done
	for (( i=0; i<${#timeStamp}; i=i+2)); do
		echo -n -e "\x${timeStamp:${i}:2}" >> ${storeDir}/time.tmp
	done
	(( $opt_DEBUG )) && echo "[DEBUG]counter: ${timeStamp}"
	# convert time to Hex value
	
	local hmacHash
	hmacHash=$(openssl dgst -sha1 -mac HMAC -macopt hexkey:"${key}" ${storeDir}/time.tmp | sed -e 's/^.* //')
	(( $opt_DEBUG )) && echo "[DEBUG]hmacHash: ${hmacHash}"
	# Generate the hash

	hmacOffset=$((16#${hmacHash:39}*2))
	# Got the offset
	
	totpHex=${hmacHash:${hmacOffset}:8}
	totpValue=$((16#${totpHex} & 16#7fffffff))
	# Truncate the hash and mask the result
	
	(( $opt_MINIO )) && echo -n "${totpValue:${#totpValue}-6}:" || prompt_BOLD "TOTP:\t${totpValue:${#totpValue}-6}"
	# Print the last 6 numbers
	
	expireTime=$(((16#${timeStamp}+1)*30-${timeValue}))
	(( $opt_MINIO )) && echo "${expireTime}" || prompt_REGU "\t${expireTime} seconds to expire."
	unset totpValue totpHex hmacOffset hmacHash key timeStamp
}

initDatabase () {
	if [ -f ${storeDir}/keys.db* ]; then
		prompt_BOLD "Key Storage exists at ${storeDir}"
		exit 0
	else
		prompt_BOLD "Initializing database at ${storeDir}..."
		mkdir ${storeDir}
		touch ${storeDir}/keys.db
		
		(( $opt_MINIO )) || read -p "${font_BOLD}Do you want to encrypt the key database? [y/N]${style_RESET} " answer
		if [[ $answer =~ (y|Y|yes) ]]; then
			encryptSetup
		else
			prompt_BOLD "Done!"
		fi
		exit 0
	fi
}

showKey () {
	if [ -f ${storeDir}/encrypted.flag ]; then
		prompt_BOLD "${cli_enc_detected}"
		aesKeyContent=`getContentAES`
		[ ${aesKeyContent} ] || exit 1
		aesHex=`getHexKEY ${aesKeyContent}`
		ivHex=`getHexIV ${aesKeyContent}`
	fi
	
	(( $opt_MINIO)) || echo "looking for ${1}..."
	keyInMem=`readKeys ${aesHex} ${ivHex}`
	keyEntry=`echo "${keyInMem}" | grep "${1}:"`
	token=${keyEntry:${#1}+1}
	# Get the encoded key from the file
	if [[ "$token" == "" ]]; then
		prompt_BOLD "Nothing found."
		exit 0
	else
		hexToken=`base32ToHex ${token}`
		(( $opt_DEBUG )) && echo "[DEBUG]Secret Hex: ${hexToken}"
		# convert the key to hexadecimal value
		genToken ${hexToken}
	fi
	
	unset keyEntry token hexToken
}

addKey () {
	if [ -f ${storeDir}/encrypted.flag ]; then
		prompt_BOLD "${cli_enc_detected}"
		aesKeyContent=`getContentAES`
		[ ${aesKeyContent} ] || exit 1
		aesHex=`getHexKEY ${aesKeyContent}`
		ivHex=`getHexIV ${aesKeyContent}`
	fi
	
	keyInMem=`readKeys "${aesHex}" "${ivHex}"`
	read -p "${font_BOLD}Put your base32 encoded key here: ${style_RESET}" encodedKey
	name="$1"
	keyInMem=${keyInMem}`printf '\n%b\n' "${name}:${encodedKey}"`
	writeKeys "${keyInMem}" "${aesHex}" "${ivHex}"
	(( $opt_MINIO )) || prompt_REGU "Key added!"
	# Store Base32 encoded keys in the file
	
	hexToken=`base32ToHex ${encodedKey}`
	(( $opt_DEBUG )) && echo "${hexToken}"
	# convert the key to hexadecimal value
	(( $opt_MINIO )) || genToken ${hexToken}
	
	unset ${encodedKey}
}

delKey () {
	if [ -f ${storeDir}/encrypted.flag ]; then
		prompt_BOLD "${cli_enc_detected}"
		aesKeyContent=`getContentAES`
		[ ${aesKeyContent} ] || exit 1
		aesHex=`getHexKEY ${aesKeyContent}`
		ivHex=`getHexIV ${aesKeyContent}`
	fi
	
	echo "looking for ${1}..."
	keyInMem=`readKeys "${aesHex}" "${ivHex}"`
	keyEntry=`echo "${keyInMem}" | grep "${1}:"`
	token=${keyEntry:${#1}+1}
	if [[ "$token" == "" ]]; then
		prompt_BOLD "Key ${1} not found."
		exit 0
	else
		prompt_WARN "WARNING!"
		prompt_REGU "${cli_del_key_warning}"
		read -p "${font_BOLD}Are you sure that you want to delete the key ${1}? [y/N]${style_RESET} " answer
		if [[ $answer =~ (y|Y|yes) ]]; then
			keyInMem=`echo "${keyInMem}" | sed -e "/${1}:/d"`
			writeKeys "${keyInMem}" "${aesHex}" "${ivHex}"
			prompt_BOLD "Key ${1} deleted."
		else
			prompt_REGU "Key not changed."
		fi
	fi
	
	unset token keyEntry keyInMem
}

listKey () {
	if [ -f ${storeDir}/encrypted.flag ]; then
		prompt_BOLD "${cli_enc_detected}"
		aesKeyContent=`getContentAES`
		[ ${aesKeyContent} ] || exit 1
		aesHex=`getHexKEY ${aesKeyContent}`
		ivHex=`getHexIV ${aesKeyContent}`
	fi
	
	keyInMem=`readKeys "${aesHex}" "${ivHex}"`
	(( ${opt_MINIO} )) || prompt_BOLD "Available Keys:"	
	for keyEntry in ${keyInMem}; do
		echo ${keyEntry} | sed -e "s/:.*$//g"
	done
	
	unset keyEntry keyInMem
}

doTest () {
	opt_TEST=1
	opt_DEBUG=1
	prompt_REGU "Using 12345678901234567890 as decoded key."
	keyForTest="3132333435363738393031323334353637383930"
	# Hex representation for 12345678901234567890
	# override the token when testing
	genToken ${keyForTest}
}

# main function
unset MAJOR
rm -rf ${storeDir}/*.tmp

for var in "$@"; do
	case "$var" in
		"init")		MAJOR="init";;
		"show")		MAJOR="show";;
		"add-key")	MAJOR="add";;
		"del-key")	MAJOR="del";;
		"list-key")	MAJOR="list";;
		"help")		MAJOR="help";;
		"test")		MAJOR="test";;
		"enable-enc")	MAJOR="encrypt";;
		"disable-enc")	MAJOR="decrypt";;
		"--debug")	opt_DEBUG=1;;
		"--minio")	opt_MINIO=1;;
		*)		PARAM="$var";;
	esac
	shift
done

case "$MAJOR" in
	init)		initDatabase;;
	show)		[[ ${PARAM} ]] && showKey "${PARAM}" || prompt_REGU "Key name required.";;
	add)		[[ ${PARAM} ]] && addKey "${PARAM}" || prompt_REGU "Key name required.";;
	del)		[[ ${PARAM} ]] && delKey "${PARAM}" || prompt_REGU "Key name required.";;
	list)		listKey;;
	help)		usage;;
	test)		doTest;;
	encrypt)	encryptSetup;;
	decrypt)	decryptSetup;;
	*)		usage;;
esac

chmod 0600 ${storeDir}/*
# forcing set file permission
(( $opt_DEBUG )) || rm -rf ${storeDir}/*.tmp
exit 0
