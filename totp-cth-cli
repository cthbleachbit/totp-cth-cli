#!/bin/bash
errorFlag=0
storeDir="${HOME}/.totp-cth-cli"
. 'base32decoder.lib.sh'

usage() {
	printf '%b\n' "Usage: totp-cth-cli <command>"
	printf '%b\n' "Commands"
	printf '%b\n' "	init		init the key storage for first time use"
	printf '%b\n' "	show <name>	show the key requested"
	printf '%b\n' "	add-key <name>	add a TOTP key"
	printf '%b\n' "	del-key	<name>	remove a TOTP key"
	printf '%b\n' "	list-key	list stored keys"
	printf '%b\n' "	help		print this help message"
	exit 0
}

genToken() {
	key="$1"
	timeStamp=$((`date +%s`/30))
	hmacHash=$(echo -n ${key} | openssl sha1 -hmac ${timeStamp} | sed -e 's/^.* //')
	for (( i=0; i<=19; i=i+1 )); do
		byteArray[${i}]=${hmacHash:${i}*2:2}
	done
	hmacOffset=$((16#${hmacHash:39}))
	for (( i=${hmacOffset}; i<=${hmacOffset}+3; i++ )); do
		tokenHex="${tokenHex}""${byteArray[${i}]}"
	done
	token=$((16#${tokenHex} & 16#7fffffff))
	echo ${token}
}

initDatabase() {
	if [[ -d ${storeDir} ]]; then
		echo -e "Key Storage exists at ${storeDir}/keys.db"
		exit 0
	fi
	mkdir ${storeDir}
	touch ${storeDir}/keys.db
	echo "Done!"
	exit 0
}

showKey() {
	echo "looking for ${1}..."
	keyEntry=`grep "${1}:" ${storeDir}/keys.db`
	token=${keyEntry:${#1}+1}
	echo $token
	[[ "$token" == "" ]] && echo "Nothing found." || genToken ${token}
}

addKey() {
	read -p "Put your key here: " encodedKey
	. 'base32decoder.sh'
	key=${encodedKey}
	name="$1"
	echo "${name}:${key}" >> ${storeDir}/keys.db

}

delKey() {
	read -p "Are you sure that you want to delete the key ${1}? [y/N] " answer
	if [[ $answer =~ (y|Y|yes) ]]; then
		sed -i -e "/${1}:/d" "${storeDir}/keys.db"
	fi
}

#function listKey {
#
#}


for var in "$@"; do
	case "$var" in
		"init")		initDatabase;;
		"show")		MAJOR="show";;
		"add-key")	MAJOR="add";;
		"del-key")	MAJOR="del";;
		"list-key")	listKey;;
		"help")		usage;;
		*)		PARAM="$var";;
	esac
	shift
done

case "$MAJOR" in
	show)	showKey "${PARAM}";;
	add)	addKey "${PARAM}";;
	del)	delKey "${PARAM}";;
esac

exit $errorFlag
