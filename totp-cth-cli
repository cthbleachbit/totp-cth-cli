#!/bin/bash
errorFlag=0
storeDir="${HOME}/.totp-cth-cli"
run_TEST=0
color_RED='\033[0;31m'
color_NOCOLOR='\033[0m'
font_BOLD=$(tput bold)
style_RESET=$(tput sgr0)
. 'base32decoder.lib.sh' 

usage() {
	printf '%b\n' "${font_BOLD}Usage: totp-cth-cli <command> [--debug]${style_RESET}"
	printf '%b\n' "${font_BOLD}Commands${style_RESET}"
	printf '%b\n' "	init		init the key storage for first time use"
	printf '%b\n' "	show <name>	show the key requested"
	printf '%b\n' "	add-key <name>	add a TOTP key"
	printf '%b\n' "	del-key	<name>	remove a TOTP key"
	printf '%b\n' "	list-key	list stored keys"
	printf '%b\n' "	help		print this help message"
	printf '%b\n' "	--test		interactive testing sector"
	printf '%b\n' "	--debug		Show Debug information"
	exit 0
}

genToken() {
	key=$1
	(( $run_TEST )) && read -p "timeStamp in seconds/30:" timeStamp || timeStamp=$((`date +%s`/30 ))
	# only ask for custom timestamp while testing
	
	timeStamp=`echo "obase=16;${timeStamp}"| bc`
	for (( i=${#timeStamp}; i<16; i++)); do
		timeStamp="0"${timeStamp}
	done
	for (( i=0; i<${#timeStamp}; i=i+2)); do
		echo -n -e "\x${timeStamp:${i}:2}" >> ${storeDir}/time.tmp
	done
	(( $debug )) && echo "counter:${timeStamp}"
	
	hmacHash=$(openssl dgst -sha1 -mac HMAC -macopt hexkey:"${key}" ${storeDir}/time.tmp | sed -e 's/^.* //')
	(( $debug )) && echo "hmacHash:${hmacHash}"
	# Generate the hash
	
	for (( i=0; i<=19; i=i+1 )); do
		byteArray[${i}]=${hmacHash:${i}*2:2}
	done
	hmacOffset=$((16#${hmacHash:39}))
	# Got the offset
	
	for (( i=${hmacOffset}; i<=${hmacOffset}+3; i++ )); do
		tokenHex="${tokenHex}""${byteArray[${i}]}"
	done
	token=$((16#${tokenHex} & 16#7fffffff))
	# Truncate the hash and mask the result
	
	echo "${font_BOLD}${token:${#token}-6}${style_RESET}"
	# Print the last 6 numbers
}

initDatabase() {
	if [[ -d ${storeDir} ]]; then
		echo -e "Key Storage exists at ${storeDir}/keys.db"
		exit 0
	fi
	mkdir ${storeDir}
	touch ${storeDir}/keys.db
	echo "Done!"
	exit 0
}

showKey() {
	echo "looking for ${1}..."
	keyEntry=`grep "${1}:" ${storeDir}/keys.db`
	token=${keyEntry:${#1}+1}
	# Get the encoded key from the file
	if [[ "$token" == "" ]]; then
		echo "Nothing found."
		exit 0
	else
		hexToken=`base32ToHex ${token}`
		(( $debug )) && echo "${token}"
		# convert the key to a printable string
		genToken ${hexToken}
	fi
}

addKey() {
	read -p "Put your key here: " encodedKey
	name="$1"
	echo "${name}:${encodedkey}" >> ${storeDir}/keys.db
	# Store Base32 encoded keys in the file
}

delKey() {
	printf '%b\n' "${color_RED}${font_BOLD}WARNING!${style_RESET}"
	printf '%b\n' "Removing this key ${font_BOLD}WON'T DISABLE${style_RESET} 2 Factor Auth for your account!"
	printf '%b\n' "If you don't have backup access, deleting this key could lock yourself out!"
	read -p "${font_BOLD}Are you sure that you want to delete the key ${1}? [y/N]${style_RESET} " answer
	if [[ $answer =~ (y|Y|yes) ]]; then
		sed -i -e "/${1}:/d" "${storeDir}/keys.db"
		printf '%b\n' "${font_BOLD}${1}${style_RESET} deleted."
	else
		printf '%b\n' "Key not changed."
	fi
}

#function listKey {
#
#}

doTest() {
	run_TEST=1
	debug=1
	echo "Using 12345678901234567890 as decoded key."
	keyForTest="3132333435363738393031323334353637383930"
	# Hex representation for 12345678901234567890
	for (( i=0; i<${#keyForTest}; i=i+2)); do
		echo -n -e "\x${keyForTest:${i}:2}" >> ${storeDir}/gen.tmp
	done
	# override the token when testing
	genToken ${keyForTest}
}

# main function

rm -rf ${storeDir}/*.tmp

for var in "$@"; do
	case "$var" in
		"init")		initDatabase;;
		"show")		MAJOR="show";;
		"add-key")	MAJOR="add";;
		"del-key")	MAJOR="del";;
		"list-key")	listKey;;
		"help")		usage;;
		"--test")	MAJOR="test";;
		"--debug")	debug=1;;
		*)		PARAM="$var";;
	esac
	shift
done

case "$MAJOR" in
	show)		showKey "${PARAM}";;
	add)		addKey "${PARAM}";;
	del)		delKey "${PARAM}";;
	test)		doTest;;
esac

(( $debug )) || rm -rf ${storeDir}/*.tmp
exit $errorFlag
